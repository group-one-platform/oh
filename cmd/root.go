package cmd

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"os"
	"os/exec"
)

var (
	cfgFile    string
	jsonOutput bool
	jqFilter   string
)

// PrintJSON writes v in JSON/jq mode if requested.
// Returns (true, err) if JSON/jq output was performed (and err is non-nil on failure),
// or (false, nil) to fall back to TUI.
func PrintJSON(v any, cmd *cobra.Command) (bool, error) {
	// if --jq was passed, ALWAYS shell out to jq
	if f := cmd.Flags().Lookup("jq"); f != nil && f.Changed {
		data, err := json.Marshal(v)
		if err != nil {
			return true, fmt.Errorf("failed to marshal JSON for jq: %w", err)
		}
		jqCmd := exec.Command("jq", jqFilter)
		jqCmd.Stdin = bytes.NewReader(data)
		jqCmd.Stdout = os.Stdout
		jqCmd.Stderr = os.Stderr
		if err := jqCmd.Run(); err != nil {
			return true, fmt.Errorf("jq failed: %w", err)
		}
		return true, nil
	}

	// else if --json, use Goâ€™s JSON
	if jsonOutput {
		out, err := json.MarshalIndent(v, "", "  ")
		if err != nil {
			return true, fmt.Errorf("failed to JSON-encode output: %w", err)
		}
		fmt.Println(string(out))
		return true, nil
	}

	// return false if output was not handled
	return false, nil
}

var rootCmd = &cobra.Command{
	Use:   "oh",
	Short: "oneHome CLI Tool",
	Long:  `Configure and control your oneHome resources, like Virtual Server instances from the command line.`,
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	cobra.OnInitialize(initConfig)

	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.oh.yaml)")

	rootCmd.PersistentFlags().
		BoolVar(&jsonOutput, "json", false, "Output in JSON format")

	rootCmd.PersistentFlags().
		StringVarP(&jqFilter, "jq", "j", "", "Pipe JSON through jq (optional FILTER). JSON output generated by jq")

	// If user passes just `--jq` with no value, treat it as `--jq .`
	f := rootCmd.PersistentFlags().Lookup("jq")
	f.NoOptDefVal = "." // filter = "." when --jq is present without =
	f.DefValue = ""     // filter = "" when --jq omitted

	// No-cache option
	rootCmd.PersistentFlags().
		Bool("no-cache", false, "disable on-disk caching of API responses")

	_ = viper.BindPFlag("no-cache", rootCmd.PersistentFlags().Lookup("no-cache"))
}

// initConfig reads in config file and ENV variables if set.
func initConfig() {
	if cfgFile != "" {
		// Use config file from the flag.
		viper.SetConfigFile(cfgFile)
	} else {
		// Find home directory.
		home, err := os.UserHomeDir()
		cobra.CheckErr(err)

		// Search config in home directory with name ".oh"
		viper.AddConfigPath(home)
		viper.SetConfigName(".oh")
		viper.SetConfigType("yaml")

		// Set defaults
		viper.SetDefault("base_url", "https://onehome.dogado.de/api/v1/")
	}

	// Read in environment variables that match
	viper.AutomaticEnv()

	// Read configuration file
	_ = viper.ReadInConfig()
}

// Completion which will short-circuit file lookup from the shell
func NoArgs(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
	return nil, cobra.ShellCompDirectiveNoFileComp
}
